import logging
from typing import Any, Dict, List, Tuple
import pickle
import numpy as np
import datetime as dt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle

logging.basicConfig(level=logging.INFO)

from configs.config import settings
from utils.utils import (
    generate_lightfm_recs_mapper,
    load_model,
    read_parquet_from_gdrive
    
)

def prepare_data_for_train() -> Tuple[pd.DataFrame]:
    """
    function to prepare data to train catboost classifier.
    Basically, you have to wrap up code from full_recsys_pipeline.ipynb
    where we prepare data for classifier. In the end, it should work such
    that we trigger and use fit() method from ranker.py
        paths_config: dict, wher key is path name and value is the path to data
    """
    # load model artefacts
    model = load_model(settings.LFM_TRAIN_PARAMS.MODEL_PATH)
    dataset = load_model(settings.LFM_TRAIN_PARAMS.MAPPER_PATH)
   
    clean_inter = pd.read_parquet("artefacts\data\clean_inter.parquet")
    clean_movies = pd.read_parquet("artefacts\data\clean_movies.parquet")
    local_test = pd.read_parquet("artefacts\data\local_test.parquet")
    
    with open('artefacts\data\seen_local_train.pkl', 'rb') as fp:
        seen_local_train = pickle.load(fp)

    users_data = clean_inter.drop(columns=['movie_id', 'year', 'month', 'day', 'watch_duration_minutes', 'watched_ratio'])
    
    lightfm_mapping = dataset.mapping()
    lightfm_mapping = {
        'users_mapping': lightfm_mapping[0],
        'user_features_mapping': lightfm_mapping[1],
        'items_mapping': lightfm_mapping[2],
        'item_features_mapping': lightfm_mapping[3],
    }
    # here we create inverted mappers to check recommendations later
    lightfm_mapping['users_inv_mapping'] = {v: k for k, v in lightfm_mapping['users_mapping'].items()}
    lightfm_mapping['items_inv_mapping'] = {v: k for k, v in lightfm_mapping['items_mapping'].items()}
    
    all_cols = list(lightfm_mapping['items_mapping'].values())
    
    with open('artefacts/item_name_mapper_data.pkl', 'rb') as fp:
        item_name_mapper_data = pickle.load(fp)
        
    test_preds = pd.DataFrame({'user_id': local_test['user_id'].unique()})
    # init mapper with model
    mapper = generate_lightfm_recs_mapper(
        model, 
        item_ids = all_cols, 
        known_items = seen_local_train,
        N = settings.LFM_PREDS_PARAMS.TOP_K,
        user_features = None, 
        item_features = None, 
        user_mapping = lightfm_mapping['users_mapping'],
        item_inv_mapping = lightfm_mapping['items_inv_mapping'],
        num_threads = 20
    )
    
    test_preds['movie_id'] = test_preds['user_id'].map(mapper)
    # define target & prepare ranker sample
    test_preds = test_preds.explode('movie_id')
    logging.info(f"Shape of the preds: {test_preds.shape}")
    test_preds['rank'] = test_preds.groupby('user_id').cumcount() + 1
    logging.info(f"Number of unique candidates generated by the LFM: {test_preds.movie_id.nunique()}")
    test_preds['item_name'] = test_preds['movie_id'].map(item_name_mapper_data)
    
    train_data = get_ranker_sample(clean_movies, test_preds=test_preds, users_data=users_data)
    
    return train_data


def get_ranker_sample(clean_movies, test_preds: pd.DataFrame, users_data: pd.DataFrame):
    """
    final step to use candidates generation and users interaction to define
    train data - join features, define target, split into train & test samples
    """
    local_test = pd.read_parquet("artefacts\data\local_test.parquet")

    # prepare train & test
    positive_preds = pd.merge(test_preds, local_test, how="inner", on=["user_id", "movie_id"])
    positive_preds["target"] = 1
    positive_preds = positive_preds[['user_id', 'movie_id', 'rank', 'target']]
    logging.info(f"Shape of the positive target preds: {positive_preds.shape}")

    negative_preds = pd.merge(test_preds, local_test, how="left", on=["user_id", "movie_id"])
    negative_preds = negative_preds.loc[negative_preds["watched_ratio"].isnull()].sample(
        frac=settings.RANKER_DATA.NEG_FRAC
    )
    negative_preds["target"] = 0
    negative_preds = negative_preds[['user_id', 'movie_id', 'rank', 'target']]
    logging.info(f"Shape of the negative target preds: {positive_preds.shape}")

    # random split to train ranker
    train_users, test_users = train_test_split(
        local_test["user_id"].unique(),
        test_size=0.2,
        random_state=settings.RANKER_DATA.RANDOM_STATE,
    )

    cbm_train_set = shuffle(
        pd.concat(
            [
                positive_preds.loc[positive_preds["user_id"].isin(train_users)],
                negative_preds.loc[negative_preds["user_id"].isin(train_users)],
            ]
        )
    )

    cbm_test_set = shuffle(
        pd.concat(
            [
                positive_preds.loc[positive_preds["user_id"].isin(test_users)],
                negative_preds.loc[negative_preds["user_id"].isin(test_users)],
            ]
        )
    )

    cbm_train_set = cbm_train_set.join(clean_movies.set_index('movie_id'), on='movie_id', how='inner')
    cbm_train_set = cbm_train_set.join(users_data.set_index('user_id'), on='user_id', how='inner')

    cbm_test_set = cbm_test_set.join(clean_movies.set_index('movie_id'), on='movie_id', how='inner')
    cbm_test_set = cbm_test_set.join(users_data.set_index('user_id'), on='user_id', how='inner')

    # final steps
    drop_cols = (
        settings.CBM_COLS_CONFIG.ID_COLS.to_list()
        + settings.CBM_COLS_CONFIG.DROP_COLS.to_list()
        + settings.TARGET.to_list()
    )
    X_train, y_train = (
        cbm_train_set.drop(
            drop_cols,
            axis=1,
        ),
        cbm_train_set[settings.TARGET],
    )
    X_test, y_test = (
        cbm_test_set.drop(
            drop_cols,
            axis=1,
        ),
        cbm_test_set[settings.TARGET],
    )
    logging.info(X_train.shape, X_test.shape)

    # no time dependent feature -- we can leave it with mode
    X_train = X_train.fillna(X_train.mode().iloc[0])
    X_test = X_test.fillna(X_test.mode().iloc[0])

    return X_train, X_test, y_train, y_test


def get_items_features(item_ids: List[int], item_cols: List[str]) -> Dict[int, Any]:
    """
    function to get items features from our available data
    that we used in training (for all candidates)
        :item_ids:  item ids to filter by
        :item_cols: feature cols we need for inference
    EXAMPLE OUTPUT
    {
    9169: {
    'content_type': 'film',
    'release_year': 2020,
    'for_kids': None,
    'age_rating': 16
        },
    10440: {
    'content_type': 'series',
    'release_year': 2021,
    'for_kids': None,
    'age_rating': 18
        }
    }
    """
    # for windows
    # item_features =pd.read_parquet("artefacts\data\clean_movies.parquet")
    # for linux
    item_features =pd.read_parquet("artefacts/data/clean_movies.parquet")

    item_features = item_features.set_index("movie_id")
    item_features = item_features.to_dict("index")

    # collect all items
    output = {}
    for id in item_ids:
        output[id] = {k: v for k, v in item_features.get(id).items() if k in item_cols}

    return output


def get_user_features(user_id: int, user_cols: List[str]) -> Dict[str, Any]:
    """
    function to get user features from our available data
    that we used in training
        :user_id: user id to filter by
        :user_cols: feature cols we need for inference
    EXAMPLE OUTPUT
    {
        'age': None,
        'income': None,
        'sex': None,
        'kids_flg': None
    }
    """
    # get interactions data to create user data
    # for windows
    # interactions = pd.read_parquet("artefacts\data\clean_inter.parquet")
    # for linux
    interactions = pd.read_parquet("artefacts/data/clean_inter.parquet")
        
    users = interactions.drop(columns=['movie_id', 'year', 'month', 'day', 'watch_duration_minutes', 'watched_ratio'])
    users = users.drop_duplicates()
    users = users.set_index("user_id")
    users_dict = users.to_dict("index")
    return {k: v for k, v in users_dict.get(user_id).items() if k in user_cols}


def prepare_ranker_input(
    candidates: Dict[int, int],
    item_features: Dict[int, Any],
    user_features: Dict[int, Any],
    ranker_features_order,
):
    ranker_input = []
    for k in item_features.keys():
        item_features[k].update(user_features)
        item_features[k]["rank"] = candidates[k]
        item_features[k] = {
            feature: item_features[k][feature] for feature in ranker_features_order
        }
        ranker_input.append(list(item_features[k].values()))

    return ranker_input